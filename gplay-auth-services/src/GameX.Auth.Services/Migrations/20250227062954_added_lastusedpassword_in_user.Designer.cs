// <auto-generated />
using System;
using gamex.Auth.Services;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace gamex.Auth.Services.Migrations
{
    [DbContext(typeof(UserDbContext))]
    [Migration("20250227062954_added_lastusedpassword_in_user")]
    partial class added_lastusedpassword_in_user
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("gamex.Auth.Services.Player", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("AvatarName")
                        .HasColumnType("text")
                        .HasColumnName("avatar_name");

                    b.Property<string>("City")
                        .HasColumnType("text")
                        .HasColumnName("city");

                    b.Property<string>("Country")
                        .HasColumnType("text")
                        .HasColumnName("country");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<DateOnly?>("DateOfBirth")
                        .HasColumnType("date")
                        .HasColumnName("date_of_birth");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_on");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("LastName")
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<string>("Mobile")
                        .HasColumnType("text")
                        .HasColumnName("mobile");

                    b.Property<string>("ProfileImagename")
                        .HasColumnType("text")
                        .HasColumnName("profile_imagename");

                    b.Property<int>("RegistrationSourceId")
                        .HasColumnType("integer")
                        .HasColumnName("registration_source_id");

                    b.Property<Guid>("UpdatedById")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by_id");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_on");

                    b.HasKey("Id")
                        .HasName("pk_players");

                    b.ToTable("players", (string)null);
                });

            modelBuilder.Entity("gamex.Auth.Services.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_on");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<string>("LastUsedPassword")
                        .HasColumnType("text")
                        .HasColumnName("last_used_password");

                    b.Property<string>("Password")
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<Guid>("PlayerId")
                        .HasColumnType("uuid")
                        .HasColumnName("player_id");

                    b.Property<Guid>("UpdatedById")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by_id");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_on");

                    b.Property<string>("UserName")
                        .HasColumnType("text")
                        .HasColumnName("user_name");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("PlayerId")
                        .IsUnique()
                        .HasDatabaseName("ix_users_player_id");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("gamex.Auth.Services.UserLogActivity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("AttemptedPassword")
                        .HasColumnType("text")
                        .HasColumnName("attempted_password");

                    b.Property<string>("AttemptedUserName")
                        .HasColumnType("text")
                        .HasColumnName("attempted_user_name");

                    b.Property<string>("Browser")
                        .HasColumnType("text")
                        .HasColumnName("browser");

                    b.Property<string>("BrowserEngine")
                        .HasColumnType("text")
                        .HasColumnName("browser_engine");

                    b.Property<string>("BrowserVersion")
                        .HasColumnType("text")
                        .HasColumnName("browser_version");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_on");

                    b.Property<string>("Device")
                        .HasColumnType("text")
                        .HasColumnName("device");

                    b.Property<string>("DeviceInfo")
                        .HasColumnType("text")
                        .HasColumnName("device_info");

                    b.Property<string>("DeviceType")
                        .HasColumnType("text")
                        .HasColumnName("device_type");

                    b.Property<string>("IpAddress")
                        .HasColumnType("text")
                        .HasColumnName("ip_address");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<bool>("IsLoginSuccessFull")
                        .HasColumnType("boolean")
                        .HasColumnName("is_login_success_full");

                    b.Property<string>("Location")
                        .HasColumnType("text")
                        .HasColumnName("location");

                    b.Property<string>("LoginFailedReason")
                        .HasColumnType("text")
                        .HasColumnName("login_failed_reason");

                    b.Property<DateTime?>("LoginTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("login_time");

                    b.Property<string>("OS")
                        .HasColumnType("text")
                        .HasColumnName("os");

                    b.Property<string>("Status")
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<Guid>("UpdatedById")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by_id");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_on");

                    b.Property<string>("UserAgent")
                        .HasColumnType("text")
                        .HasColumnName("user_agent");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_log_activities");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_log_activities_user_id");

                    b.ToTable("user_log_activities", (string)null);
                });

            modelBuilder.Entity("gamex.Auth.Services.User", b =>
                {
                    b.HasOne("gamex.Auth.Services.Player", "Player")
                        .WithOne("User")
                        .HasForeignKey("gamex.Auth.Services.User", "PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_users_players_player_id");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("gamex.Auth.Services.UserLogActivity", b =>
                {
                    b.HasOne("gamex.Auth.Services.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_user_log_activities_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("gamex.Auth.Services.Player", b =>
                {
                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
